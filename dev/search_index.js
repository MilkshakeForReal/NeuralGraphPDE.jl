var documenterSearchIndex = {"docs":
[{"location":"api/messagepassing/","page":"Message Passing","title":"Message Passing","text":"CurrentModule = NeuralGraphPDE","category":"page"},{"location":"api/messagepassing/#Message-Passing","page":"Message Passing","title":"Message Passing","text":"","category":"section"},{"location":"api/messagepassing/#Index","page":"Message Passing","title":"Index","text":"","category":"section"},{"location":"api/messagepassing/","page":"Message Passing","title":"Message Passing","text":"Order = [:type, :function]\nPages   = [\"messagepassing.md\"]","category":"page"},{"location":"api/messagepassing/#Docs","page":"Message Passing","title":"Docs","text":"","category":"section"},{"location":"api/messagepassing/","page":"Message Passing","title":"Message Passing","text":"apply_edges\npropagate","category":"page"},{"location":"api/messagepassing/#GraphNeuralNetworks.apply_edges","page":"Message Passing","title":"GraphNeuralNetworks.apply_edges","text":"apply_edges(f, g, xi, xj, e, ps, st)\napply_edges(f, g, ps, st; [xi, xj, e])\n\nArguments\n\nps: Parameters of the neural network inside the function f\nst: State of the neural network inside the function f\n\n\n\n\n\n","category":"function"},{"location":"api/messagepassing/#GraphNeuralNetworks.propagate","page":"Message Passing","title":"GraphNeuralNetworks.propagate","text":"propagate(f, g, aggr, ps, st; xi, xj, e)  ->  m̄\n\n\n\n\n\n","category":"function"},{"location":"api/layers/","page":"layers","title":"layers","text":"CurrentModule = NeuralGraphPDE","category":"page"},{"location":"api/layers/#Layers","page":"layers","title":"Layers","text":"","category":"section"},{"location":"api/layers/#Index","page":"layers","title":"Index","text":"","category":"section"},{"location":"api/layers/","page":"layers","title":"layers","text":"Order = [:type, :function]\nModules = [NeuralGraphPDE]\nPages = [\"layers.md\"]","category":"page"},{"location":"api/layers/#Docs","page":"layers","title":"Docs","text":"","category":"section"},{"location":"api/layers/","page":"layers","title":"layers","text":"Modules = [NeuralGraphPDE]\nPages   = [\"layers.jl\"]\nPrivate = false","category":"page"},{"location":"api/layers/#NeuralGraphPDE.ExplicitEdgeConv","page":"layers","title":"NeuralGraphPDE.ExplicitEdgeConv","text":"ExplicitEdgeConv(ϕ; aggr=max)\n\nArguments\n\nϕ: A neural network. \naggr: Aggregation operator for the incoming messages (e.g. +, *, max, min, and mean).\n\nInput\n\nCase1: \nndata: NamedTuple (u=u,...,x=x) where u is the node embedding and x is the spatial coordinate.\nCase2: \nndata: NamedTuple or Array.\nedata: Array of spatial differences.\n\n\n\n\n\n","category":"type"},{"location":"api/layers/#NeuralGraphPDE.ExplicitGCNConv","page":"layers","title":"NeuralGraphPDE.ExplicitGCNConv","text":"ExplicitGCNConv()\n\nSame as the one in GraphNeuralNetworks.jl but with exiplicit paramters\n\nArguments\n\nin_chs: \nout_chs:\nactivation:\nadd_self_loops: \nuse_edge_weight:\n\nExamples\n\n# create data\ns = [1,1,2,3]\nt = [2,3,1,1]\ng = GNNGraph(s, t)\nx = randn(3, g.num_nodes)\n\n# create layer\nl = ExplicitGCNConv(3 => 5) \n\n# setup layer\nrng = Random.default_rng()\nRandom.seed!(rng, 0)\n\nps, st = Lux.setup(rng, l)\n\n# forward pass\ny = l(g, x, ps, st)       # size:  5 × num_nodes\n\n# convolution with edge weights\nw = [1.1, 0.1, 2.3, 0.5]\ny = l(g, x, ps, st, w)\n\n# Edge weights can also be embedded in the graph.\ng = GNNGraph(s, t, w)\nl = ExplicitGCNConv(3 => 5, use_edge_weight=true) \ny = l(g, x, ps, st) # same as l(g, x, ps, st, w) \n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = NeuralGraphPDE","category":"page"},{"location":"#NeuralGraphPDE","page":"Home","title":"NeuralGraphPDE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NeuralGraphPDE.","category":"page"}]
}
